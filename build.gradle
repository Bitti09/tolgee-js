buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

group 'io.tolgee'
apply plugin: 'idea'


idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('packages/core/node_modules')
        excludeDirs += file('packages/core/dist')
        excludeDirs += file('packages/core/lib')
        excludeDirs += file('packages/ui/node_modules')
        excludeDirs += file('packages/ui/dist')
        excludeDirs += file('packages/ui/lib')
        excludeDirs += file('packages/react/dist')
        excludeDirs += file('packages/react/lib')
        excludeDirs += file('packages/react/node_modules')
        excludeDirs += file('packages/ngx/dist')
        excludeDirs += file('packages/ngx/lib')
        excludeDirs += file('packages/ngx/node_modules')
        excludeDirs += file('e2e/cypress/testapps/dist')
        excludeDirs += file('e2e/cypress/videos')
    }
}

apply from: "./gradle/e2e.gradle"

task lernaBootstrap(type: Exec) {
    commandLine "lerna", "bootstrap"
    finalizedBy "linkLibReactToReactTestApp", "linkLibReactDomToReactTestApp"
}

//this is a solution for multiple react error in hook
//dependabot cannot handle dependency path which doesn't exist
task linkLibReactToReactTestApp {
    def workdir = "testapps/react/node_modules"
    outputs.dir("$workdir/react")
    inputs.dir("packages/react/node_modules/react")
    doLast {
        exec {
            workingDir workdir
            commandLine "rm", "-rf", "react"
        }
        exec {
            workingDir workdir
            commandLine "ln", "-sf", "../../../packages/react/node_modules/react", "."
        }
    }
}

//this is a solution for multiple react error in hook
//dependabot cannot handle dependency path which doesn't exist
task linkLibReactDomToReactTestApp {
    def workdir = "testapps/react/node_modules"
    outputs.dir("$workdir/react-dom")
    inputs.dir("packages/react/node_modules/react-dom")
    doLast {
        exec {
            workingDir workdir
            commandLine "rm", "-rf", "react-dom"
        }
        exec {
            workingDir workdir
            commandLine "ln", "-sf", "../../../packages/react/node_modules/react-dom", "."
        }
    }
}

task buildCore(type: Exec) {
    inputs.dir("packages/core")
    outputs.dir("packages/core/dist")
    outputs.dir("packages/core/lib")
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/core"
}

task buildReact(type: Exec) {
    inputs.dir("packages/react")
    outputs.dir("packages/react/dist")
    outputs.dir("packages/react/lib")
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/react"
    mustRunAfter "buildCore", "buildUi"
}

task buildNgx(type: Exec) {
    inputs.dir("packages/ngx")
    outputs.dir("packages/ngx/dist")
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/ngx"
    mustRunAfter "buildCore", "buildUi"
}

task buildNgxForPublish(type: Exec) {
    outputs.dir("packages/ngx/dist")
    commandLine "npm", "run", "buildProd"
    workingDir "packages/ngx"
    mustRunAfter "buildCore", "buildUi"
}

task buildUi(type: Exec) {
    inputs.dir("packages/ui")
    outputs.dir("packages/ui/dist")
    outputs.dir("packages/ui/lib")
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/ui"
}

task buildCoreTestapps(type: Exec) {
    inputs.dir("testapps/core")
    outputs.dir("testapps/core/dist")
    dependsOn "lernaBootstrap", "buildCore", "buildUi"
    commandLine "npm", "run", "build"
    workingDir "testapps/core"
}

task buildReactTestapps(type: Exec) {
    inputs.dir("testapps/react")
    outputs.dir("testapps/react/dist")
    dependsOn "lernaBootstrap", "buildCore", "buildUi"
    commandLine "npm", "run", "build"
    workingDir "testapps/react"
    mustRunAfter "buildCore", "buildUi"
}

task buildNgxTestapps(type: Exec) {
    inputs.dir("testapps/ngx")
    outputs.dir("testapps/ngx/dist")
    dependsOn "lernaBootstrap", "buildCore", "buildUi", "buildNgx"
    commandLine "npm", "run", "build"
    workingDir "testapps/ngx"
    mustRunAfter "buildCore", "buildUi", "buildNgx"
}

task buildAll(type: Task) {
    dependsOn "buildCore", "buildUi", "buildReact", "buildNgx", "buildCoreTestapps", "buildReactTestapps", "buildNgxTestapps"
}

task developAll(type: Exec) {
    dependsOn "lernaBootstrap", "buildAll"
    commandLine "lerna", "exec", "--parallel", "--", "npm", "run", "develop"
}

task testCore(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/core"
}

task testReact(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/react"
}

task testUi(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/ui"
}

task build(type: Task) {
    dependsOn "buildAll", "testUi", "testCore", "testReact", "runE2e"
}